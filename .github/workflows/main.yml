name: Build APK

# Definir a trigger para executar o workflow
on:
  workflow_dispatch:  # Isso permite que você inicie o workflow manualmente
  push:
    branches:
      - main  # Quando houver um push para o branch principal, o workflow será executado

jobs:
  build:
    runs-on: ubuntu-latest  # Define o ambiente para executar o workflow

    steps:
      # Passo 1: Fazer o checkout do código
      - name: Checkout code
        uses: actions/checkout@v2  # Ação para pegar o código do repositório

      # Passo 2: Configurar o Python
      - name: Set up Python
        uses: actions/setup-python@v2  # Configurar a versão do Python
        with:
          python-version: '3.x'  # Especificar a versão do Python a ser usada

      # Passo 3: Instalar dependências
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Atualizar o pip
          pip install -r requirements.txt  # Instalar dependências listadas no arquivo requirements.txt

      # Passo 4: Instalar Buildozer e dependências necessárias para criar o APK
      - name: Install Buildozer
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache git libncurses5 libssl-dev zlib1g-dev
          python -m pip install buildozer  # Instalar o Buildozer

      # Passo 5: Construir o APK usando o Buildozer
      - name: Build APK
        run: |
          buildozer android debug  # Comando para gerar o APK no modo de depuração

      # Passo 6: Fazer upload do APK gerado
      - name: Upload APK
        uses: actions/upload-artifact@v2  # Usar a ação para fazer upload de arquivos
        with:
          name: app-release.apk  # Nome do arquivo gerado
          path: bin/app-debug.apk  # Caminho onde o Buildozer coloca o APK gerado (ajuste conforme necessário)
